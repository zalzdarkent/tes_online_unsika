name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip
        coverage: none

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install PHP Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Install NPM Dependencies
      run: npm ci

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 755 storage bootstrap/cache

    - name: Build Assets
      run: npm run build

    - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password
      run: php artisan test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Deploy to VPS with Docker
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          cd ${{ secrets.VPS_PROJECT_PATH }}

          # Pull latest code (sama seperti yang kamu lakukan manual)
          echo "üîÑ Pulling latest code from GitHub..."
          git pull origin main

          # Masuk ke container app untuk migration (kalau ada perubahan DB)
          echo "üóÑÔ∏è Running database migrations..."
          docker compose exec -T app php artisan migrate

          # Masuk ke container app untuk build assets (seperti yang kamu lakukan manual)
          echo "üèóÔ∏è Building frontend assets..."
          docker compose exec -T app npm run build

          # Laravel optimizations (opsional - bisa di-comment kalau tidak perlu)
          echo "‚ö° Optimizing Laravel..."
          docker compose exec -T app php artisan config:cache
          docker compose exec -T app php artisan route:cache
          docker compose exec -T app php artisan view:cache

          echo "‚úÖ Deployment completed successfully!"
